import React from 'react';

interface ProductFruitsComponentProps {
    workspaceCode: string;
    language: string;
    user: ProductFruitsUserObject;
    dontDestroy?: boolean;
    lifeCycle?: 'neverUnmount' | 'unmount';
    config?: ProductFruitsInitOptions;
    debug?: boolean;
}
declare global {
    interface Window {
        productFruitsIsReady?: boolean;
        productFruitsReady?: () => void;
        productFruits?: {
            api?: any;
        };
    }
}
declare type ProductFruitsInitOptions = {
    disableLocationChangeDetection?: boolean;
    disableBannersAutoMargin?: boolean;
    hideInAppCenterLauncher?: boolean;
    customNavigation?: {
        use?: boolean;
        onGet?: () => string;
        navigate?: (location: string) => void;
    };
};
declare type ProductFruitsUserObject = {
    username: string;
    email?: string;
    role?: string;
    signUpAt?: string;
    firstname?: string;
    lastname?: string;
    props?: UserCustomProps;
    hmac?: {
        hash: string;
        expiration?: string | null | undefined;
    };
    group?: {
        groupId?: string;
        props?: UserGroupCustomProps;
    };
};
declare type UserCustomProps = {
    [key: string]: string | number | boolean | Array<string> | Array<number> | UserCustomProps;
};
declare type UserGroupCustomProps = {
    [key: string]: string | number | boolean | Array<string> | Array<number> | UserCustomProps;
};

declare type UseProductFruitsApiCallback = (pfObject: any) => void;
declare function useProductFruitsApi(callback: (api: any) => Function | void | undefined, deps: React.DependencyList): void;
declare function isProductFruitsReady(): boolean;

declare function ProductFruits(props: ProductFruitsComponentProps): null;

export { ProductFruits, UseProductFruitsApiCallback, isProductFruitsReady, useProductFruitsApi };
